`configure' configures libconfini 1.16.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/libconfini]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-extended-config[=MODE]
                          extend the configure process to files that normally
                          do not need to be re-configured, as their final
                          content depends on upstream changes only and not on
                          the state of this machine; possible values for MODE
                          are: omitted or "yes" or "merge" for updating these
                          files immediately, "sandbox" for safely putting
                          their updated version into the `confnew` directory
                          without modifying the package tree, or "no" for
                          doing nothing [default=no]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-author-mode    enable make rules and dependencies that facilitate
                          the programming workflow for developing libconfini
                          but are not useful (or are even counterproductive)
                          to the casual installer
                          [default=<enable-extended-config>]
  --disable-maintainer-mode
                          disable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-version-info,
  --disable-version-info  enable/disable libtool versioning system
                          [default=SYSTEM-DEPENDENT]
  --disable-devel         don't install development files (headers, static
                          libraries, documentation, examples, etc.)
                          [default=no]
  --disable-doc           don't generate any documentation
                          [default=<disable-devel>]
  --disable-man           don't generate man pages [default=<disable-doc>]
  --disable-examples      don't generate examples
                          [default=<disable-doc/without-io-api>]
  --enable-htmldoc        generate the html documentation [default=no]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-dllexp         create module-definition (.def) and export (.exp)
                          files when compiling for Microsoft Windows
                          [default=no]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-other-versions   make this package able to cohabit with other major
                          versions of itself [default=no]
  --without-libc          Assume that no C Standard Library is present in the
                          system [default=no]
  --with-io-api=API,
  --without-io-api        build this package with a specific I/O API; possible
                          values for API are: "standard" for using the C
                          Standard I/O API, "posix" for using the POSIX I/O
                          API, "baremetal" or "no" (--without-io-api) for
                          using no I/O API at all, or "check" for
                          automatically selecting the best I/O API supported
                          by this machine [default=check]
  --with-pkgconfigdir=DIR pkg-config installation directory
                          [default=<libdir>/pkgconfig]
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX, [default=aix].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  TESTS_PRINTF_HEADER
              The C header file containing the `printf()` function - this
              variable applies to checks only and does **not** apply to the
              library's code [default='<stdio.h>']
  TESTS_PRINTF_FUNCTION
              An alternative name for the `printf()` function - this variable
              applies to checks only and does **not** apply to the library's
              code [default=printf]
  RC          Microsoft Windows resource compiler command
  RCFLAGS     Microsoft Windows resource compiler flags
  FIND        Unix find utility
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <madmurphy333@gmail.com>.
libconfini home page: <https://madmurphy.github.io/libconfini>.

